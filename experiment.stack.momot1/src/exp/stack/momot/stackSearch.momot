package exp.stack.momot

import exp.stack.momot.StackModule
import at.ac.tuwien.big.momot.problem.unit.parameter.random.RandomIntegerValue
import stack.StackModel
import at.ac.tuwien.big.moea.util.MathUtil
import at.ac.tuwien.big.momot.^search.^fitness.dimension.TransformationLengthDimension
import at.ac.tuwien.big.momot.^search.solution.repair.TransformationPlaceholderRepairer
import org.moeaframework.core.operator.TournamentSelection
import org.moeaframework.core.operator.OnePointCrossover
import at.ac.tuwien.big.momot.^search.algorithm.operator.mutation.TransformationPlaceholderMutation
import at.ac.tuwien.big.momot.^search.algorithm.operator.mutation.TransformationParameterMutation
import at.ac.tuwien.big.moea.^experiment.executor.listener.SeedRuntimePrintListener
import stack.StackPackage

initialization = {
   StackPackage.eINSTANCE.class
}

search = {
   model          = {
      file = "model/model_five_stacks.xmi"
   }
   solutionLength = 8
   
   transformations = {
      modules = [ "model/stack.henshin" ] 
      ignoreUnits = [ 
         StackModule.CreateStack.NAME, 
         StackModule.ConnectStacks.NAME
      ]
      ignoreParameters = [
         StackModule.ShiftLeft.Parameter.FROM_LOAD,
         StackModule.ShiftLeft.Parameter.TO_LOAD,
         StackModule.ShiftRight.Parameter.FROM_LOAD, 
         StackModule.ShiftRight.Parameter.TO_LOAD
      ]      
      parameterValues = {
         StackModule.ShiftLeft.Parameter.AMOUNT  : new RandomIntegerValue(1, 5)
         StackModule.ShiftRight.Parameter.AMOUNT : new RandomIntegerValue(1, 5)
      }
   }
   
   fitness = {
      objectives = { // could also use OCL as: minimize "ocl-expression"
          StandardDeviation : minimize { MathUtil.getStandardDeviation((root as StackModel).stacks.map[load]) }
          SolutionLength    : minimize new TransformationLengthDimension
      }
      solutionRepairer = new TransformationPlaceholderRepairer
   }
   
   algorithms = {
      NSGA_II   : moea.createNSGAII(
                  new TournamentSelection(2),
                  new OnePointCrossover(1.0), 
                  new TransformationPlaceholderMutation(0.15),
                  new TransformationParameterMutation(0.1, orchestration.moduleManager))
   }   
}

experiment = {
   populationSize    = 100
   maxEvaluations    = 1000
   nrRuns             = 300
   progressListeners = [ new SeedRuntimePrintListener ]
}
   
analysis = {
   indicators        = [ hypervolume additiveEpsilonIndicator maximumParetoFrontError  ]
   show               = [ individualValues aggregateValues statisticalSignificance ]
   significance     = 0.01
   outputFile       = "output/analysis/analysis.txt"
   boxplotDirectory = "output/analysis/boxplot/"
}
   
results = {   
   objectives = {
   	  outputFile = "output/objectives/overall_objectives.pf"
      printOutput
   }
   
   solutions = {
      outputFile = "output/solutions/overall_solutions.txt"
      outputDirectory ="output/solutions/"
   }
 
   models = {
      outputDirectory = "output/models"
   }
}   